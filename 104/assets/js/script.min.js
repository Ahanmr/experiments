let data={sketch:{background:"#EFEFEF",opacity:255},thing:{radius:0.1*window.innerWidth},axes:{stroke:"#000000",weight:3}};var controlkit,createControlKit=()=>{controlkit=new ControlKit,controlkit.addPanel({fixed:!1,label:"Controls"}).addColor(data.sketch,"background",{colorMode:"hex",label:"Background Color"}).addNumberInput(data.sketch,"opacity",{label:"Opacity",step:1,dp:1}).addSubGroup({label:"Divider Appearances"}).addColor(data.axes,"stroke",{colorMode:"hex",label:"Background Color"}).addNumberInput(data.axes,"weight",{label:"Stroke Weight",step:1})};let thing;function setup(){let a=createCanvas(windowWidth,windowHeight);a.id("canvas"),data.thing.radius=0.08*width,angleMode(DEGREES),thing=new Thing(0.15*width,0.75*height)}function draw(){background(red(data.sketch.background),green(data.sketch.background),blue(data.sketch.background),data.sketch.opacity),thing.run()}class Thing{constructor(a,b){this.origin=new p5.Vector(a,b),this.position=new p5.Vector(a,b),this.sine_positions=[],this.cosine_positions=[]}run(){this.axes(),this.sine(),this.cos(),this.update(),this.show()}sine(){let a=new p5.Vector(0.3*width,this.origin.y+this.position.y);this.sine_positions.push(a),push(),stroke(0),line(this.origin.x+this.position.x,this.origin.y+this.position.y,a.x,a.y),strokeWeight(10),point(a.x,a.y),pop(),push(),this.sine_positions.forEach(c=>{c.x+=1});for(var b=0;b<this.sine_positions.length;b+=1)1<b&&(line(this.sine_positions[b].x,this.sine_positions[b].y,this.sine_positions[b-1].x,this.sine_positions[b-1].y),this.sine_positions[b].x>width&&(this.sine_positions.splice(0,1),console.log(this.sine_positions.length)));pop()}cos(){push(),stroke(0),noFill(),arc(0.3*width,0.5*height,2*(this.origin.x-this.position.x),2*(this.origin.x-this.position.x),180,270),strokeWeight(10),point(this.origin.x+this.position.x,0.5*height);let a=new p5.Vector(0.3*width,0.5*height),b=new p5.Vector(this.origin.x+this.position.x,0.5*height),c=p5.Vector.sub(b,a);c.rotate(radians(90));let d=p5.Vector.add(c,a);this.cosine_positions.push(d),point(d.x,d.y),strokeWeight(1),line(this.origin.x+this.position.x,this.origin.y+this.position.y,b.x,b.y),pop(),push(),this.cosine_positions.forEach(f=>{f.x+=1});for(var e=0;e<this.cosine_positions.length;e+=1)1<e&&(line(this.cosine_positions[e].x,this.cosine_positions[e].y,this.cosine_positions[e-1].x,this.cosine_positions[e-1].y),this.cosine_positions[e].x>width&&(this.cosine_positions.splice(0,1),console.log(this.cosine_positions.length)))}axes(){push(),stroke(data.axes.stroke),line(0.3*width,0.5*height-(0.3*width-this.origin.x),width,0.5*height-(0.3*width-this.origin.x)),line(0.3*width,0.75*height,width,0.75*height),strokeWeight(data.axes.weight),line(0,0.5*height,width,0.5*height),line(0.3*width,0,0.3*width,height),pop()}show(){translate(this.origin.x,this.origin.y),push(),strokeWeight(5),point(0,0),pop(),push(),noFill(),ellipse(0,0,2*data.thing.radius,2*data.thing.radius),line(0,0,this.position.x,this.position.y),push(),translate(this.position.x,this.position.y),stroke(0),strokeWeight(10),point(0,0),pop(),pop()}update(){this.position.x=data.thing.radius*cos(1.5*frameCount),this.position.y=data.thing.radius*sin(1.5*frameCount)}}