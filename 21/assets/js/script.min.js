let data={sketch:{background:"#FFFFFF"},fractal:{n:3,transparent:!0,fill:"#FFFFFF",stroke:"#000000",strokeWeight:1,root_diameter:300,threshhold_diameter:20,diameter_multiplier:0.5,translate_multiplier:0.5,animate_rotation:!1,rotation:0,rotation_animation_speed:0.2}};var controlkit,createControlKit=()=>{controlkit=new ControlKit,controlkit.addPanel({fixed:!1,label:"Fractal Controls"}).addColor(data.sketch,"background",{colorMode:"hex",label:"Background Color"}).addSubGroup({label:"Fractal Controls"}).addCheckbox(data.fractal,"transparent",{label:"Transparent?"}).addColor(data.fractal,"fill",{colorMode:"hex",label:"Fill Color"}).addColor(data.fractal,"stroke",{colorMode:"hex",label:"Stroke Color"}).addNumberInput(data.fractal,"n",{label:"Branches per iteration"}).addNumberInput(data.fractal,"root_diameter",{label:"Root Diameter"}).addNumberInput(data.fractal,"translate_multiplier",{label:"Spacing between Generations",dp:3,step:0.01}).addNumberInput(data.fractal,"threshhold_diameter",{label:"Threshhold Diameter",dp:1,step:0.5}).addNumberInput(data.fractal,"diameter_multiplier",{label:"Diameter Multiplier",dp:2,step:0.01}).addCheckbox(data.fractal,"animate_rotation",{label:"Animate Rotation?"}).addNumberInput(data.fractal,"rotation_animation_speed",{label:"Rotation Animation Speed",dp:2,step:0.01}).addNumberInput(data.fractal,"rotation",{label:"Rotation (Manual)",dp:1,step:1})};createControlKit();function setup(){createCanvas(windowWidth,windowHeight)}function draw(){background(data.sketch.background),translate(width/2,height/2),fractal(data.fractal.root_diameter)}function fractal(a){if(angleMode(DEGREES),data.fractal.transparent?noFill():fill(data.fractal.fill),stroke(data.fractal.stroke),strokeWeight(data.fractal.strokeWeight),ellipse(0,0,a,a),data.fractal.animate_rotation?rotate(data.fractal.rotation_animation_speed*frameCount):rotate(data.fractal.rotation),a>data.fractal.threshhold_diameter)for(var b=0,c=data.fractal.n;b<c;b+=1){let e=a*cos(360/data.fractal.n*b),f=a*sin(360/data.fractal.n*b);push(),translate(e*data.fractal.translate_multiplier,f*data.fractal.translate_multiplier),fractal(a*data.fractal.diameter_multiplier),pop()}}